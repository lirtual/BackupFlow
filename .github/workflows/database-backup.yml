name: BackupFlow

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:      # Support manual trigger

env:
  # Shorthand format configuration (recommended)
  DATABASES: ${{ secrets.DATABASES }}
  STORAGES: ${{ secrets.STORAGES }}
  COMPRESSION: ${{ secrets.COMPRESSION || 'true' }}
  RETENTION_DAYS: ${{ secrets.RETENTION_DAYS || '30' }}
  VERIFY_BACKUP: ${{ secrets.VERIFY_BACKUP || 'true' }}
  BACKUP_TIMEOUT: ${{ secrets.BACKUP_TIMEOUT || '60' }}

  # Multi-strategy format (if needed)
  DATABASES_1: ${{ secrets.DATABASES_1 }}
  STORAGES_1: ${{ secrets.STORAGES_1 }}
  DATABASES_2: ${{ secrets.DATABASES_2 }}
  STORAGES_2: ${{ secrets.STORAGES_2 }}
  DATABASES_3: ${{ secrets.DATABASES_3 }}
  STORAGES_3: ${{ secrets.STORAGES_3 }}

  # Global configuration
  LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'INFO' }}

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update

          # Check database types in environment variables and install corresponding clients
          # Support multi-strategy configuration, auto-detect all required database types

          # Check if MySQL client is needed
          if echo "$DATABASES $DATABASES_1 $DATABASES_2 $DATABASES_3 $DATABASES_4 $DATABASES_5" | grep -q "mysql://"; then
            echo "Detected MySQL configuration, installing MySQL client..."
            sudo apt-get install -y mysql-client
          fi

          # Check if PostgreSQL client is needed
          if echo "$DATABASES $DATABASES_1 $DATABASES_2 $DATABASES_3 $DATABASES_4 $DATABASES_5" | grep -q -E "(postgres)://"; then
            echo "Detected PostgreSQL configuration, installing PostgreSQL client..."
            sudo apt-get install -y postgresql-client
          fi

          # Show message if no database configuration is detected
          if ! echo "$DATABASES $DATABASES_1 $DATABASES_2 $DATABASES_3 $DATABASES_4 $DATABASES_5" | grep -q -E "(mysql|postgres)://"; then
            echo "No database configuration detected, skipping client installation"
            echo "If needed, please set DATABASES or DATABASES_X environment variables"
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

          # Install additional dependencies based on database type
          if echo "$DATABASES $DATABASES_1 $DATABASES_2 $DATABASES_3 $DATABASES_4 $DATABASES_5" | grep -q -E "(postgres)://"; then
            echo "Installing PostgreSQL Python client..."
            pip install psycopg2-binary
          fi

      - name: Validate configuration
        run: |
          echo "Validating configuration..."
          python src/main.py --info

      - name: Test connections
        run: |
          echo "Testing database and storage connections..."
          python src/main.py --test-connections

      - name: Run backup
        run: |
          echo "Executing database backup..."
          python src/main.py